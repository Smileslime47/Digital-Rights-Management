package moe._47saikyo.drm.blockchain.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.reflection.Parameterized;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class DRManager extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_addLicense = "addLicense";

    public static final String FUNC_addRight = "addRight";

    public static final String FUNC_CANINSERTRIGHT = "canInsertRight";

    public static final String FUNC_GETLASTLICENSE = "getLastLicense";

    public static final String FUNC_GETLASTRIGHT = "getLastRight";

    public static final String FUNC_getLicense = "getLicense";

    public static final String FUNC_getLicenses = "getLicenses";

    public static final String FUNC_getRight = "getRight";

    public static final String FUNC_GETRIGHTBYFILEHASH = "getRightByFileHash";

    public static final String FUNC_GETRIGHTBYREGISTRATIONNUMBER = "getRightByRegistrationNumber";

    public static final String FUNC_getRights = "getRights";

    public static final String FUNC_PING = "ping";

    public static final String FUNC_SEARCHBYTITLE = "searchByTitle";

    @Deprecated
    protected DRManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DRManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DRManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DRManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addLicense(String owner, License license) {
        final Function function = new Function(
                FUNC_addLicense, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                license), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addLicense(License license) {
        final Function function = new Function(
                FUNC_addLicense, 
                Arrays.<Type>asList(license), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addRight(String owner, Right right) {
        final Function function = new Function(
                FUNC_addRight, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                right), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addRight(Right right) {
        final Function function = new Function(
                FUNC_addRight, 
                Arrays.<Type>asList(right), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> canInsertRight(String registrationNumber, String fileHash) {
        final Function function = new Function(FUNC_CANINSERTRIGHT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(registrationNumber), 
                new org.web3j.abi.datatypes.Utf8String(fileHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<License> getLastLicense(String owner) {
        final Function function = new Function(FUNC_GETLASTLICENSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<License>() {}));
        return executeRemoteCallSingleValueReturn(function, License.class);
    }

    public RemoteFunctionCall<Right> getLastRight(String owner) {
        final Function function = new Function(FUNC_GETLASTRIGHT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Right>() {}));
        return executeRemoteCallSingleValueReturn(function, Right.class);
    }

    public RemoteFunctionCall<License> getLicense(BigInteger index) {
        final Function function = new Function(FUNC_getLicense, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<License>() {}));
        return executeRemoteCallSingleValueReturn(function, License.class);
    }

    public RemoteFunctionCall<License> getLicense(String deployer, BigInteger index) {
        final Function function = new Function(FUNC_getLicense, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, deployer), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<License>() {}));
        return executeRemoteCallSingleValueReturn(function, License.class);
    }

    public RemoteFunctionCall<List> getLicenses(String deployer) {
        final Function function = new Function(FUNC_getLicenses, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, deployer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<License>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getLicenses() {
        final Function function = new Function(FUNC_getLicenses, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<License>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Right> getRight(String deployer, BigInteger index) {
        final Function function = new Function(FUNC_getRight, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, deployer), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Right>() {}));
        return executeRemoteCallSingleValueReturn(function, Right.class);
    }

    public RemoteFunctionCall<Right> getRight(BigInteger index) {
        final Function function = new Function(FUNC_getRight, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Right>() {}));
        return executeRemoteCallSingleValueReturn(function, Right.class);
    }

    public RemoteFunctionCall<Right> getRightByFileHash(String fileHash) {
        final Function function = new Function(FUNC_GETRIGHTBYFILEHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fileHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Right>() {}));
        return executeRemoteCallSingleValueReturn(function, Right.class);
    }

    public RemoteFunctionCall<Right> getRightByRegistrationNumber(String registrationNumber) {
        final Function function = new Function(FUNC_GETRIGHTBYREGISTRATIONNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(registrationNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Right>() {}));
        return executeRemoteCallSingleValueReturn(function, Right.class);
    }

    public RemoteFunctionCall<List> getRights() {
        final Function function = new Function(FUNC_getRights, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Right>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getRights(String deployer) {
        final Function function = new Function(FUNC_getRights, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, deployer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Right>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> ping() {
        final Function function = new Function(FUNC_PING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> searchByTitle(String title) {
        final Function function = new Function(FUNC_SEARCHBYTITLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(title)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Right>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static DRManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DRManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DRManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DRManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DRManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DRManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DRManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DRManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DRManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DRManager.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DRManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DRManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DRManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DRManager.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DRManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DRManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class KeyPair extends StaticStruct {
        public String deployer;

        public BigInteger arrayIndex;

        public KeyPair(String deployer, BigInteger arrayIndex) {
            super(new org.web3j.abi.datatypes.Address(160, deployer), 
                    new org.web3j.abi.datatypes.generated.Uint256(arrayIndex));
            this.deployer = deployer;
            this.arrayIndex = arrayIndex;
        }

        public KeyPair(Address deployer, Uint256 arrayIndex) {
            super(deployer, arrayIndex);
            this.deployer = deployer.getValue();
            this.arrayIndex = arrayIndex.getValue();
        }
    }

    public static class License extends DynamicStruct {
        public BigInteger index;

        public String rightTitle;

        public KeyPair rightKeyPair;

        public String deployer;

        public String owner;

        public BigInteger issueTime;

        public BigInteger expireTime;

        public String description;

        public License(BigInteger index, String rightTitle, KeyPair rightKeyPair, String deployer, String owner, BigInteger issueTime, BigInteger expireTime, String description) {
            super(new org.web3j.abi.datatypes.generated.Uint256(index), 
                    new org.web3j.abi.datatypes.Utf8String(rightTitle), 
                    rightKeyPair, 
                    new org.web3j.abi.datatypes.Address(160, deployer), 
                    new org.web3j.abi.datatypes.Utf8String(owner), 
                    new org.web3j.abi.datatypes.generated.Uint64(issueTime), 
                    new org.web3j.abi.datatypes.generated.Uint64(expireTime), 
                    new org.web3j.abi.datatypes.Utf8String(description));
            this.index = index;
            this.rightTitle = rightTitle;
            this.rightKeyPair = rightKeyPair;
            this.deployer = deployer;
            this.owner = owner;
            this.issueTime = issueTime;
            this.expireTime = expireTime;
            this.description = description;
        }

        public License(Uint256 index, Utf8String rightTitle, KeyPair rightKeyPair, Address deployer, Utf8String owner, Uint64 issueTime, Uint64 expireTime, Utf8String description) {
            super(index, rightTitle, rightKeyPair, deployer, owner, issueTime, expireTime, description);
            this.index = index.getValue();
            this.rightTitle = rightTitle.getValue();
            this.rightKeyPair = rightKeyPair;
            this.deployer = deployer.getValue();
            this.owner = owner.getValue();
            this.issueTime = issueTime.getValue();
            this.expireTime = expireTime.getValue();
            this.description = description.getValue();
        }
    }

    public static class Right extends DynamicStruct {
        public BigInteger index;

        public String title;

        public String deployer;

        public String owner;

        public String registrationNumber;

        public BigInteger issueTime;

        public BigInteger expireTime;

        public String description;

        public String fileName;

        public String fileHash;

        public List<KeyPair> licenses;

        public Right(BigInteger index, String title, String deployer, String owner, String registrationNumber, BigInteger issueTime, BigInteger expireTime, String description, String fileName, String fileHash, List<KeyPair> licenses) {
            super(new org.web3j.abi.datatypes.generated.Uint256(index), 
                    new org.web3j.abi.datatypes.Utf8String(title), 
                    new org.web3j.abi.datatypes.Address(160, deployer), 
                    new org.web3j.abi.datatypes.Utf8String(owner), 
                    new org.web3j.abi.datatypes.Utf8String(registrationNumber), 
                    new org.web3j.abi.datatypes.generated.Uint64(issueTime), 
                    new org.web3j.abi.datatypes.generated.Uint64(expireTime), 
                    new org.web3j.abi.datatypes.Utf8String(description), 
                    new org.web3j.abi.datatypes.Utf8String(fileName), 
                    new org.web3j.abi.datatypes.Utf8String(fileHash), 
                    new org.web3j.abi.datatypes.DynamicArray<KeyPair>(KeyPair.class, licenses));
            this.index = index;
            this.title = title;
            this.deployer = deployer;
            this.owner = owner;
            this.registrationNumber = registrationNumber;
            this.issueTime = issueTime;
            this.expireTime = expireTime;
            this.description = description;
            this.fileName = fileName;
            this.fileHash = fileHash;
            this.licenses = licenses;
        }

        public Right(Uint256 index, Utf8String title, Address deployer, Utf8String owner, Utf8String registrationNumber, Uint64 issueTime, Uint64 expireTime, Utf8String description, Utf8String fileName, Utf8String fileHash, @Parameterized(type = KeyPair.class) DynamicArray<KeyPair> licenses) {
            super(index, title, deployer, owner, registrationNumber, issueTime, expireTime, description, fileName, fileHash, licenses);
            this.index = index.getValue();
            this.title = title.getValue();
            this.deployer = deployer.getValue();
            this.owner = owner.getValue();
            this.registrationNumber = registrationNumber.getValue();
            this.issueTime = issueTime.getValue();
            this.expireTime = expireTime.getValue();
            this.description = description.getValue();
            this.fileName = fileName.getValue();
            this.fileHash = fileHash.getValue();
            this.licenses = licenses.getValue();
        }
    }
}
